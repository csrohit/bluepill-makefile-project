{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red156\green167\blue178;\red255\green255\blue255;\red178\green176\blue167;
\red252\green122\blue49;\red155\green212\blue59;\red236\green130\blue85;\red134\green226\blue191;\red253\green165\blue66;
\red199\green144\blue255;\red75\green181\blue255;}
{\*\expandedcolortbl;;\cssrgb\c67552\c71479\c74924;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c74968\c74181\c71342;
\cssrgb\c99864\c55882\c24777;\cssrgb\c66515\c84916\c29516;\cssrgb\c94845\c58723\c40566;\cssrgb\c58417\c90198\c79524;\cssrgb\c99851\c70386\c32614;
\cssrgb\c82575\c65334\c100000;\cssrgb\c35143\c76372\c100000;}
{\info
{\author Rohit Nimkar}
{\*\copyright Rohit Nimkar}}\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @file\cf2 \strokec2  main.cpp\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @author\cf2 \strokec2  Rohit Nimkar (nehalnimkar@gmail.com)\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @brief\cf2 \strokec2  Main program body\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @version\cf2 \strokec2  1.2\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @date\cf2 \strokec2  2022-12-07\cf4 \strokec4 \
\cf2 \strokec2  *\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @copyright\cf2 \strokec2  Copyright (c) 2022\cf4 \strokec4 \
\cf2 \strokec2  * \cf5 \strokec5 @attention\cf4 \strokec4 \
\cf2 \strokec2  *\cf4 \strokec4 \
\cf2 \strokec2  * This software component is licensed by Rohit Nimkar under BSD 3-Clause license,\cf4 \strokec4 \
\cf2 \strokec2  * the "License"; You may not use this file except in compliance with the\cf4 \strokec4 \
\cf2 \strokec2  * License. You may obtain a copy of the License at: opensource.org/licenses/BSD-3-Clause\cf4 \strokec4 \
\cf2 \strokec2  *\cf4 \strokec4 \
\cf2 \strokec2  */\cf4 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 #include\cf4 \strokec4  \cf6 \strokec6 <cstdint>\cf4 \strokec4 \
\cf5 \strokec5 #include\cf4 \strokec4  \cf6 \strokec6 "../include/stm32f1xx.h"\cf4 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 // #include <dma.hpp>\cf4 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 #include\cf4 \strokec4  \cf6 \strokec6 <dma_channel.hpp>\cf4 \strokec4 \
\cf5 \strokec5 #include\cf4 \strokec4  \cf6 \strokec6 <usart.hpp>\cf4 \strokec4 \
\
\cf5 \strokec5 const\cf4 \strokec4  \cf5 \strokec5 char\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4 msg \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 "Hello, World!\cf8 \strokec8 \\r\\n\cf6 \strokec6 "\cf4 \strokec4 ;\
\
\cf5 \strokec5 void\cf4 \strokec4  \cf9 \strokec9 USART1_putc\cf4 \strokec4 (\cf5 \strokec5 char\cf10 \strokec10  c\cf4 \strokec4 )\
\{\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2   // wait for tx data register to be empty\cf4 \strokec4 \
  \cf5 \strokec5 while\cf4 \strokec4  (\cf7 \strokec7 !\cf4 \strokec4 (\cf9 \strokec9 USART1\cf4 \strokec4 ->SR \cf7 \strokec7 &\cf4 \strokec4  \cf9 \strokec9 USART_SR_TXE\cf4 \strokec4 ))\
    ;\
  \cf9 \strokec9 USART1\cf4 \strokec4 ->DR \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 0x\cf10 \strokec10 000000ff\cf4 \strokec4  \cf7 \strokec7 &\cf4 \strokec4  \cf10 \strokec10 c\cf4 \strokec4 ;\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf5 \strokec5 void\cf4 \strokec4  \cf9 \strokec9 USART1_puts\cf4 \strokec4 (\cf5 \strokec5 const\cf10 \strokec10  \cf5 \strokec5 char\cf10 \strokec10  \cf5 \strokec5 *\cf10 \strokec10 ch\cf4 \strokec4 )\
\{\
  \cf5 \strokec5 while\cf4 \strokec4  (\cf7 \strokec7 *\cf10 \strokec10 ch\cf4 \strokec4 )\
  \{\
    \cf9 \strokec9 USART1_putc\cf4 \strokec4 (\cf7 \strokec7 *\cf10 \strokec10 ch\cf4 \strokec4 );\
    \cf10 \strokec10 ch\cf7 \strokec7 ++\cf4 \strokec4 ;\
  \}\
\}\
\
\cf5 \strokec5 int\cf4 \strokec4  \cf9 \strokec9 main\cf4 \strokec4 (\cf5 \strokec5 void\cf4 \strokec4 )\
\{\
\
  \cf9 \strokec9 SysTick_Config\cf4 \strokec4 (\cf10 \strokec10 8000\cf4 \strokec4 );\
\
  \cf9 \strokec9 RCC\cf4 \strokec4 ->AHBENR \cf7 \strokec7 |=\cf4 \strokec4  \cf9 \strokec9 RCC_AHBENR_DMA1EN\cf4 \strokec4 ;\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2   // enable clock for GPIOA and USART1\cf4 \strokec4 \
  \cf9 \strokec9 RCC\cf4 \strokec4 ->APB2ENR \cf7 \strokec7 |=\cf4 \strokec4  \cf9 \strokec9 RCC_APB2ENR_USART1EN\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 RCC_APB2ENR_IOPAEN\cf4 \strokec4 ;\
\
\cf2 \strokec2   // reset pin configurations for PA9 and PA10\cf4 \strokec4 \
  \cf9 \strokec9 GPIOA\cf4 \strokec4 ->CRH \cf7 \strokec7 &=\cf4 \strokec4  \cf7 \strokec7 ~\cf4 \strokec4 (\cf9 \strokec9 GPIO_CRH_MODE10\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_MODE9\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_CNF10\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_CNF9\cf4 \strokec4 );\
\
\cf2 \strokec2   // PA9 as Output@50Hz Alternate function\cf4 \strokec4 \
  \cf9 \strokec9 GPIOA\cf4 \strokec4 ->CRH \cf7 \strokec7 |=\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_MODE9_0\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_MODE9_1\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_CNF9_1\cf4 \strokec4 ;\
\
\cf2 \strokec2   // PA10 as floating input\cf4 \strokec4 \
  \cf9 \strokec9 GPIOA\cf4 \strokec4 ->CRH \cf7 \strokec7 |=\cf4 \strokec4  \cf9 \strokec9 GPIO_CRH_CNF10_0\cf4 \strokec4 ;\
\
  \cf11 \strokec11 uint32_t\cf4 \strokec4  baud \cf7 \strokec7 =\cf4 \strokec4  (\cf11 \strokec11 uint32_t\cf4 \strokec4 )(\cf10 \strokec10 8000000\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf10 \strokec10 115200\cf4 \strokec4 );\
\
  \cf9 \strokec9 USART1\cf4 \strokec4 ->BRR \cf7 \strokec7 =\cf4 \strokec4  baud;\
\
\cf2 \strokec2   // transmitter enable, receiver enable, receiver interrupt enable and USART enable\cf4 \strokec4 \
  \cf9 \strokec9 USART1\cf4 \strokec4 ->CR1 \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 USART_CR1_TE\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 USART_CR1_RE\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 USART_CR1_RXNEIE\cf4 \strokec4  \cf7 \strokec7 |\cf4 \strokec4  \cf9 \strokec9 USART_CR1_UE\cf4 \strokec4 ;\
\
\cf2 \strokec2   // enable USART1 interrupt\cf4 \strokec4 \
  \cf9 \strokec9 NVIC_EnableIRQ\cf4 \strokec4 (USART1_IRQn);\
\
\
\
\
\
\
\cf2 \strokec2   // USART * my_usart = USART::get_instance(USART1);\cf4 \strokec4 \
\
\cf2 \strokec2   // USART  &ttl = *new (USART::Usart1) USART;\cf4 \strokec4 \
\cf2 \strokec2   // ttl.set_baudrate(USART::BR_115200);\cf4 \strokec4 \
\
\cf2 \strokec2   // ttl.setTransmitterState(USART::Enabled);\cf4 \strokec4 \
\cf2 \strokec2   // ttl.setInterruptState(USART::TransmissionCompleteInterrupt, USART::Enabled);\cf4 \strokec4 \
\
\cf2 \strokec2   // my_usart->set_baudrate(USART::BR_115200);\cf4 \strokec4 \
\cf2 \strokec2   // my_usart->enable_peripheral(USART::peripheral_t::Transmitter);\cf4 \strokec4 \
\cf2 \strokec2   // my_usart->enable_dma_request(USART::dma_req_t::TransmitterRequest);\cf4 \strokec4 \
\
\cf2 \strokec2   // DMA_Channel *tx_channel = (DMA_Channel *)0x40020044;\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->setPeripheralAddress((uint32_t *)&USART1->DR);\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->setMemoryAddress((uint32_t *)msg);\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->setTransferDirection(DMA_Channel::MemoryToPeripheral);\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->enableMemoryIncrementMode();\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->enableCircularMode();\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->enableInterrupt(DMA_Channel::TransferComplete);\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->reload(15);\cf4 \strokec4 \
\cf2 \strokec2   // tx_channel->start();\cf4 \strokec4 \
\
\cf2 \strokec2   // my_usart->start();\cf4 \strokec4 \
\
  \cf5 \strokec5 while\cf4 \strokec4  (\cf10 \strokec10 1\cf4 \strokec4 )\
  \{\
    \cf9 \strokec9 USART1_puts\cf4 \strokec4 (msg);\
    \cf9 \strokec9 delay_ms\cf4 \strokec4 (\cf10 \strokec10 5000\cf4 \strokec4 );\
  \}\
\}\
}